<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-23T22:31:58+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Lemur</title><subtitle>Y'all heard me right, buds</subtitle><entry><title type="html">Bunch of trams</title><link href="http://localhost:4000/readability-post/" rel="alternate" type="text/html" title="Bunch of trams" /><published>2012-05-22T00:00:00+02:00</published><updated>2012-05-22T00:00:00+02:00</updated><id>http://localhost:4000/readability-post</id><content type="html" xml:base="http://localhost:4000/readability-post/">&lt;h3 id=&quot;thats-something&quot;&gt;That’s something&lt;/h3&gt;

&lt;h3 id=&quot;tram-shockers&quot;&gt;Tram shockers&lt;/h3&gt;

&lt;p&gt;Now we see those suckers every day but do we really ruminate on our future in the world without them? Maybe no, maybe yes, who knows. The truth is that I’ve prepared a short visualisation on them so suck it up.&lt;/p&gt;

&lt;h3 id=&quot;true-facts-about-trams&quot;&gt;True facts about trams&lt;/h3&gt;

&lt;p&gt;Trams are old. Really old, like 100 years or so old. Or maybe even older. They’re like trains, so basically one dude long time ago thought that it is a great idea to have a train going through the city on a regular basis. “-Guys, shirk that one a little and let’em go through the main square! -Main square? -Yup. Right through the middle of it.” Killer idea, really.
Speaking of killer, here’s a killer visualisation. Right below.&lt;/p&gt;

&lt;!-- Code from d3-graph-gallery.com --&gt;
&lt;p&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;

&lt;!-- Load d3.js --&gt;
&lt;script src=&quot;https://d3js.org/d3.v4.js&quot;&gt;&lt;/script&gt;

&lt;!-- Create a div where the graph will take place --&gt;
&lt;div id=&quot;my_dataviz&quot;&gt;&lt;/div&gt;

&lt;script&gt;
  // set the dimensions and margins of the graph
  var margin = { top: 10, right: 30, bottom: 30, left: 60 },
    width = 1000 - margin.left - margin.right,
    height = 600 - margin.top - margin.bottom;
  // append the svg object to the body of the page
  var svg = d3
    .select(&quot;#my_dataviz&quot;)
    .append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width + margin.left + margin.right)
    .attr(&quot;height&quot;, height + margin.top + margin.bottom)
    .append(&quot;g&quot;)
    .attr(&quot;transform&quot;, &quot;translate(&quot; + margin.left + &quot;,&quot; + margin.top + &quot;)&quot;);

  var z = d3
    .scaleLinear()
    .domain([
      93,
      200,
      300,
      400,
      500,
      600,
      700,
      800,
      900,
      10000,
      2000,
      4000,
      5000,
      7000,
      8000,
      9000
    ])
    .range([
      &quot;#2c7bb6&quot;,
      &quot;#00a6ca&quot;,
      &quot;#00ccbc&quot;,
      &quot;#90eb9d&quot;,
      &quot;#ffff8c&quot;,
      &quot;#f9d057&quot;,
      &quot;#f29e2e&quot;,
      &quot;#e76818&quot;,
      &quot;#d7191c&quot;
    ]);

  var tooltip = d3
    .select(&quot;#my_dataviz&quot;)
    .append(&quot;div&quot;)
    .style(&quot;opacity&quot;, 0)
    .attr(&quot;class&quot;, &quot;tooltip&quot;)
    .style(&quot;background-color&quot;, &quot;white&quot;)
    .style(&quot;border&quot;, &quot;solid&quot;)
    .style(&quot;border-width&quot;, &quot;1px&quot;)
    .style(&quot;border-radius&quot;, &quot;5px&quot;)
    .style(&quot;padding&quot;, &quot;10px&quot;);

  // A function that change this tooltip when the user hover a point.
  // Its opacity is set to 1: we can now see it. Plus it set the text and position of tooltip depending on the datapoint (d)
  var mouseover = function(d) {
    tooltip.style(&quot;opacity&quot;, 1);
  };

  var mousemove = function(d) {
    d3.select(this).attr(&quot;r&quot;, 6);
    tooltip
      .html(
        &quot;Source: &quot; +
          d.source +
          &quot;, airline: &quot; +
          d.airline +
          &quot;, distance: &quot; +
          Math.ceil(d.distance)
      )
      .style(&quot;left&quot;, d3.mouse(this)[0] + 90 + &quot;px&quot;) // It is important to put the +90: other wise the tooltip is exactly where the point is an it creates a weird effect
      .style(&quot;top&quot;, d3.mouse(this)[1] + &quot;px&quot;);
  };

  // A function that change this tooltip when the leaves a point: just need to set opacity to 0 again
  var mouseleave = function(d) {
    d3.select(this).attr(&quot;r&quot;, 1.5);

    tooltip
      .transition()
      .duration(200)
      .style(&quot;opacity&quot;, 0);
  };
  //Read the data
  d3.csv(
    // &quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/2_TwoNum.csv&quot;,
    &quot;./TSNE.csv&quot;,
    function(data) {
      // Add X axis
      var x = d3
        .scaleLinear()
        .domain([0, 0])
        .range([0, width]);
      svg
        .append(&quot;g&quot;)
        .attr(&quot;class&quot;, &quot;myXaxis&quot;) // Note that here we give a class to the X axis, to be able to call it later and modify it
        .attr(&quot;transform&quot;, &quot;translate(0,&quot; + height + &quot;)&quot;)
        // .call(d3.axisBottom(x))
        // .call(g =&gt; g.select(&quot;domain&quot;).remove())
        .attr(&quot;opacity&quot;, &quot;0&quot;);
      // Add Y axis
      var y = d3
        .scaleLinear()
        .domain([-50, 50])
        .range([0, height]);
      svg
        .append(&quot;g&quot;)
        // .call(d3.axisLeft(y))
        .call(g =&gt; g.select(&quot;domain&quot;).remove());
      // Add dots
      svg
        .append(&quot;g&quot;)
        .selectAll(&quot;dot&quot;)
        .data(data)
        .enter()
        .append(&quot;circle&quot;)
        .attr(&quot;cx&quot;, function(d) {
          return x(d.x);
        })
        .attr(&quot;cy&quot;, function(d) {
          return y(d.y);
        })
        .attr(&quot;r&quot;, 1.5)
        .style(&quot;fill&quot;, function(d) {
          return z(d.distance);
        })
        .on(&quot;mouseover&quot;, mouseover)
        .on(&quot;mousemove&quot;, mousemove)
        .on(&quot;mouseleave&quot;, mouseleave);

      // new X axis
      x.domain([-35, 35]);
      svg
        .select(&quot;.myXaxis&quot;)
        .transition()
        .duration(2000)
        .attr(&quot;opacity&quot;, &quot;1&quot;);
      // .call(d3.axisBottom(x));

      svg
        .selectAll(&quot;circle&quot;)
        .transition()
        .delay(function(d, i) {
          return i * 3;
        })
        .duration(2000)
        .attr(&quot;cx&quot;, function(d) {
          return x(d.x);
        })
        .attr(&quot;cy&quot;, function(d) {
          return y(d.y);
        });
    }
  );
&lt;/script&gt;
&lt;p&gt;–&amp;gt;&lt;/p&gt;</content><author><name></name></author><category term="duh" /><summary type="html">True facts about trams</summary></entry><entry><title type="html">Another one bites the dust</title><link href="http://localhost:4000/another-post/" rel="alternate" type="text/html" title="Another one bites the dust" /><published>2012-05-22T00:00:00+02:00</published><updated>2012-05-22T00:00:00+02:00</updated><id>http://localhost:4000/another-post</id><content type="html" xml:base="http://localhost:4000/another-post/">&lt;h3 id=&quot;thats-something&quot;&gt;That’s something&lt;/h3&gt;

&lt;h3 id=&quot;shocking-truth-t-sne-is-not-hammer-down-tool&quot;&gt;Shocking truth: t-sne is not hammer-down tool&lt;/h3&gt;

&lt;p&gt;You just cannot take any data and hammer it down with t-sne.
Roughly. Technically. Well, you can, but it comes out shite most of the time.&lt;/p&gt;

&lt;p&gt;Below is the vis&lt;/p&gt;

&lt;html&gt;
&lt;!-- &lt;script src=&quot;https://d3js.org/d3.v4.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;h4&gt;This is tsne http://localhost:4000&lt;/h4&gt;
&lt;div id=&quot;my_dataviz&quot;&gt;&lt;/div&gt;
&lt;script scr=&quot;http://localhost:4000/tsne/tsne.js&quot;&gt;&lt;/script&gt;

&lt;/html&gt;</content><author><name></name></author><category term="huh" /><summary type="html">Sad truth about tsne</summary></entry></feed>